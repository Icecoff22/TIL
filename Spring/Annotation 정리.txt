# Annotation 정리

- Entity
    - DB 테이블과 일대일로 매칭되는 객체 단위
    - Entity 객체의 인스턴스 하나가 테이블에서 하나의 레코드 값 의미
    - @Table의 name속성을 이용해 DB상의 실제 테이블 명칭을 지정하지 않는다면 Entity 클래스 이름 그대로 CamelCase를 유지한 채 테이블 생성되어 관례로 테이블 이름 명시적으로 작성해야 함
    - DB상에서 보편적으로 사용되는 명명법은 UnderScore이 원칙(언더바 사용하여 테이블 명명하는 것)

- Column
    - DB 테이블에 있는 컬럼과 1대1 매칭되므로 Entity 클래스 안에 내부 변수로 정의됨
    - DB 테이블 상 필요없는 컬럼은 작성하지 않아도 무방
    - Entity 클래스에 정의된 모든 내부변수는 Column 어노테이션 포함
    - Entity와 동일하게 name속성을 명시하지 않을 시 Entity클래스에 정의한 컬럼 변수의 이름으로 생성됨, 따라서 CamelCase로 작성된 컬럼 변수가 있다면 UnderScore 형식으로 name을 명시적으로 작성
    - length속성 : 없으면 255 기본 지정, 문자열 형태에만 해당, 큰 숫자인 BigDecimal일 경우 precision, scale 속성으로 지정 가능

- Id
    - 유일한 값, PK
    - 데이터 경쟁으로 발생되는 데드락 현상을 방지하기 위해 주로 BigInteger인 Java의 Long을 주로 사용

- GeneratedValue
    - 대량의 요청 유입 시 중복과 Deadlock이 발생되지 않을 만큼 키 값이 빨리 생성 되고 안전하게 관리되어야 하는 것이 중요
    - Deadlock
        
        동일한 시점에 요청 유입 시 DB는 테이블 혹은 레코드를 lock을 걸어 데이터가 변경되지 않도록 막아놓고 다른 작업을 진행함.
        
        첫 번째 요청이 A테이블 값 변경 후 lock → B테이블 접근
        
        두 번째 요청이 B테이블 값 변경 후 lock → A테이블 접근
        
        두 요청이 동시에 이루어졌을 때, DB는 우선순위를 판단할 수 없어 교착상태(이도저도 못하는 상태)에 빠짐. 이것이 Deadlock. 이 때의 해결방법은 강제로 시스템 재시작하여 DB 커넥션을 초기화시켜주어야 한다.
        
    - 보편적으로 MySQL은 auto increment속성, ORACLE은 sequence속성을 사용
    - auto increment
        - 새로운 레코드 생성될 때마다 마지막 PK 값에서 자동으로 +1 해주는 방식
        - strategy 속성을 GenerationType.IDENTITY로 지정하여 auto increment컬럼인 것을 EntityManager에게 알려줌
        - 이 때 자동으로 생성되는 값을 가지는 PK컬럼의 이름은 명시적으로 id로 지정하는 것이 관례
    - sequence
        - ORACLE에서 사용되는 방식
        - sequence ORACLE 객체를 생성해 두고 해당 sequence를 호출할 때마다 기존 값의 +1이 된 값을 반환해 주는 방식
        - strategy 속성을 GenerationType.SEQUENCE로 지정

- EmbeddedId
    - 복합키로서 테이블의 PK를 정의할 때 사용
    - 복합키는 두 개 이상의 Id 어노테이션으로 구성이 되는데, 직접 Entity에 정의하는 것이 아닌 별도의 Value를 사용해 복합키 정의
    - Value생성 후 Embeddable 어노테이션을 이용해 해당 Value가 Entity에 삽입이 가능함을 명시, Entity에서는 EmbeddedId 어노테이션을 이용해 해당 Entity에 해당 Value를 PK로 사용한다고 지정

- Enumerated
    - enum형태로 되어 있는 미리 정의되어 있는 코드 값이나 구분 값을 데이터 타입으로 사용하고자 할 때 사용
    - 속성 EnumType.ORDINAL : enum객체에 정의된 순서가 컬럼의 값으로 사용
    - 속성 EnumType.STRING : enum의 문자열 자체가 컬럼의 값으로 사용

- Transsient
    - Entity 객체에 속성으로 지정되어 있지만 DB상에 필요없는 속성이라면 Transient어노테이션을 사용해 해당 속성을 DB에서 이용하지 않겠다라고 정의
    - 해당 속성을 Entity 객체에 임시로 값을 담는 용도로 사용이 가능해짐

- CrossOrigin
    - Origin 속성 : 특정 출처만 접근 가능
    - 기본 속성 : 모든 도메인에 대해 접근 가능

출처 : https://www.icatpark.com/entry/JPA-%EA%B8%B0%EB%B3%B8-Annotation-%EC%A0%95%EB%A6%AC


