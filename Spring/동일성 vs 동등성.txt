동일성
Identity, 메모리 내 주소값이 같은지 비교
자바 내에서 "=="를 통해 객체의 메모리 내 주소 값이 같은지 식별한다.

동등성
Equality, 논리적 지위가 동등한지 비교
특정 기준이 있고 이를 만족시키면 동등하다고 판단.

Ex.
public class Bus(){
    private final String name;
    private int number;

    public Bus(String name){
        this.name = name;
    }
}
void BusTest() {
    Bus bus1 = new Bus("마을버스");
    Bus bus2 = new Bus("마을버스");

    assertThat(bus1).isEqualTo(bus2);
}
위의 예제에서 Bus 클래스를 정의했다.
같은 이름을 가진 버스는 존재할 수 없다고 한다면,
같은 버스 객체를 생성했을 때 같다고 판단해야 할 것이다. 
위의 테스트에서는 같다를 기대했지만, 테스트가 실패한다.
이유는 Object.equals() 메소드가 ==비교를 통해 주소값을 비교하기 때문이다.

따라서 테스트를 통과하게 만들기 위해서는 String class에서 equals를 override하여
기준이 주소 값이 이름으로 두기로 해보자.

@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (o == null || getClass() != o.getClass())
        return false;
    Car car = (Car)o;
    return name.equals(car.name);
}

Override 어노테이션을 Bus 클래스 속에 넣음으로써 Bus 객체에서 equals를 호출하면
위의 equals 메서드가 호출될 것이다. 흐름은 다음과 같다.
1. 주소 값이 같으면 true를 리턴한다.
2. 주소 값이 null이거나 bus 클래스가 아닐경우 false를 리턴한다.
3. name필드 값이 같은지 검증한다.
이를 통해 name값 동일성 여부에 따라 bus가 같은지 다른지 판단된다.
따라서 위의 equals 메서드는 동등성 여부에 사용된다.
논리적 동등성의 기준을 어떻게 정하느냐에 따라 개발자가 정의해야 한다.

equals와 hashcode는 항상 같이 거론된다.
이유는 Collection에 있다.
Collection이란 List, Map, Set 등을 말하는데 예제를 먼저 보겠다.

void busContainsTest(){
    Bus bus1 = new Bus("마을버스");
    Bus bus2 = new Bus("마을버스");

    Set<Bus> arr = new HashSet<>();
    arr.add(bus1);
    arr.add(bus2);

    assertThat(arr.size()).isEqualTo(1);
}
위의 예제는 두 같은 객체를 Set에 넣었을 때 같은 것으로 판단하는지
확인하는 예제이다.
예제의 결과로는 테스트 에러가 난다. 
이유는 Set이 Hash Table을 사용하는 자료형이기 때문이다.
Hash Table을 사용하는 자료형에서는 어떤 데이터가 존재하는지 확인하기 위해 해싱 알고리즘을 사용한다.
해싱된 결과를 주소값으로 찾아가서 그곳에 같은 자료가 있는지 확인한다.
해싱 알고리즘에 사용되는 데이터가 hashCode이다.

Object 클래스의 hashCode는 native 메소드이고, 메모리 주소값을 정수로 변환한 값을 반환합니다.

지금은 두 Bus 인스턴스의 주소값이 다르므로, 각 hashCode 메소드의 결과값이 다르게 반환될 거고,
그 결과 다른 공간에 저장되어 길이가 1이 아닌 2가 되는 것이다.
이로써 Bus Collection의 동등성이 보장되지 않음을 확인할 수 있다.

따라서 객체의 동등성을 위해 equals메소드를 오버라이드 한다면, hashCode메소드도 오버라이드 해야 한다.
그래야 Hash Table을 사용하는 자료구조에서도 동등성을 보장할 수 있다.

@Override
public int hashCode(){
    return Objects.hash(name);
}
위 예시와 같이 오버라이드하면 된다.
위 코드로 인해 주소 값이 달라도 name이 같으면 hashCode의 결과 값이 같다.
따라서 hash Table을 사용한 자료구조에서도 동등성을 보장할 수 있다.

참고 Reference : https://creampuffy.tistory.com/140
